knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(digits = 7)
options(pillar.sigfig = 5)
library(tidyverse)
medications <- read_csv("medications.csv")
messy_health_records <- read_csv("messy_health_records.csv")
patients <- read_csv("patients.csv")
# calculates the amount of missing values in each column
colSums(is.na(messy_health_records))
# provides a summary for the data set before cleaning
summary(messy_health_records)
messy_health_records <- messy_health_records %>%
# drops the NA values in the 3 specified columns
drop_na(blood_pressure, cholesterol_level, patient_age)
# glimpses the data set, checking the types of each column
glimpse(messy_health_records)
# checks the data type of visit_date
class(messy_health_records$visit_date)
# finding the amount of duplicate records
numDuplicatedRecords<- messy_health_records %>%
# counts the amount of rows for each unique record id and patient id
count(record_id, patient_id) %>%
# filters to find the duplicate rows (n is greater than 1)
filter(n > 1) %>%
nrow()
# finds the number of rows originally
numRowOrig <- nrow(messy_health_records)
messy_health_records <- messy_health_records %>%
# removes duplicated records, while keeping all columns
distinct(record_id, patient_id, .keep_all = TRUE)
# finds the number of rows in the new data set
numRowNew <- nrow(messy_health_records)
# returns the number of duplicate records found
numDuplicatedRecords
# returns the number of rows removed
numRowOrig - numRowNew
iqr_fences <- messy_health_records %>%
# selects cholesterol_level and patient_age columns
select(cholesterol_level, patient_age) %>%
# defines the lower and upper fences (outlier threshold) for
# cholesterol_level and patient_age
summarize(lower_fenceChol = quantile(cholesterol_level, 0.25) - 1.5 * IQR(cholesterol_level),
upper_fenceChol = quantile(cholesterol_level, 0.75) + 1.5 * IQR(cholesterol_level),
lower_fenceAge = quantile(patient_age, 0.25) - 1.5 * IQR(patient_age),
upper_fenceAge = quantile(patient_age, 0.75) + 1.5 * IQR(patient_age))
#displays iqr_fences summary table
iqr_fences
# identifies outliers in the data frame
identified_outliers <- messy_health_records %>%
# adds two new boolean columns, TRUE if cholesterol or age is outlier
mutate(cholIsOutlier = cholesterol_level < iqr_fences$lower_fenceChol |
cholesterol_level > iqr_fences$upper_fenceChol,
ageIsOutlier = patient_age < iqr_fences$lower_fenceAge |
patient_age > iqr_fences$upper_fenceAge)
# reports how many outliers there are in cholesterol_level and patient_age
str_glue("Outliers in cholestorel_level: {sum(identified_outliers$cholIsOutlier)}")
str_glue("Outliers in patient_age: {sum(identified_outliers$ageIsOutlier)}")
# NA values removed, duplicate rows removed
summary(messy_health_records)
messy_health_records <- messy_health_records %>%
# creates new column by extracting the month from visit_date
mutate(visit_month = month(visit_date))
messy_health_records %>%
# displays the new column
select(record_id:visit_date, visit_month) %>%
head() # displays the first six rows
messy_health_records <- messy_health_records %>%
# adds a new column of type factor, 3 levels
# assigns each age to one of 3 age groups: Young, Middle-aged, and Senior
mutate(patient_age_group = factor(case_when(patient_age >= 18 &
patient_age <= 35 ~ "Young",
patient_age >= 36 &
patient_age <= 60 ~ "Middle-aged",
patient_age >= 61 ~ "Senior"),
levels = c("Young", "Middle-aged", "Senior")))
messy_health_records %>%
# displays the new column
select(record_id:visit_date, visit_month, patient_age_group) %>%
head() # displays the first six rows
messy_health_records <- messy_health_records %>%
# adds a new column of type factor, with 3 levels
# assigns cholesterol_level to a group. "Low", "Moderate", or "High"
mutate(cholesterol_risk = factor(case_when(cholesterol_level < 160 ~ "Low",
cholesterol_level >= 160 &
cholesterol_level <= 200 ~ "Moderate",
cholesterol_level > 200 ~ "High"),
levels = c("Low", "Moderate", "High")))
messy_health_records %>%
# displays the new column
select(record_id:visit_date, visit_month:cholesterol_risk) %>%
head() # displays the first six rows
messy_health_records %>%
# groups by unique hospital_location and condition
group_by(hospital_location, condition) %>%
# computes the total rows in each unique group
summarize(n = n()) %>%
# converts long format to wide format, using each condition as a
# separate column name
pivot_wider(names_from = condition, values_from = n)
merged_patient_health <- messy_health_records %>%
# merges the health data with patient data
left_join(patients, by = "patient_id")
head(merged_patient_health) # displays the first 6 rows of merged_patient_health
merged_all <- merged_patient_health %>%
# merges the previous data frame with medications
left_join(medications, by = "condition")
head(merged_all) # displays the first 6 rows
# displays the structure of the completely merged data set
glimpse(merged_all)
merged_all %>%
# only keeps rows where dosage_mg is less than or equal to 200 mg
filter(dosage_mg <= 200) %>%
# selects columns to accurately display the dosages in mg
select(record_id:visit_date, recommended_medication, dosage_mg) %>%
head() # displays the first 6 rows of the dataset
merged_all %>%
# groups by conditions
group_by(condition) %>%
# computes the number of rows for each unique group
summarize(count = n()) %>%
# arranges in descending order by count
arrange(desc(count))
# produces summary table for average cholesterol level per patient_age_group
merged_all %>%
# groups by patient_age_group
group_by(patient_age_group) %>%
# summarizes the average chol level for each patient_age_group
summarize(avg_chol = mean(cholesterol_level))
# produces a boxplot of cholesterol level per patient_age_group
merged_all %>%
ggplot() +
# creates the boxplot, with cholesterol on y axis, age on x axis
geom_boxplot(aes(x = patient_age_group, y = cholesterol_level)) +
# labels the visualization
labs(x = "Age Group",
y = "Cholesterol Level (mg/dL)",
title = "Boxplot of Cholesterol Level per Age Group")
# calculates the proportion of patients who received medication
propMedication <- mean(merged_all$medication_given == "Yes")
# calculates the percentage of patients who received medication
percentMedication <- propMedication * 100
percentMedication
merged_all_percentage <- merged_all %>%
# counts rows for medication_given (yes/no)
count(medication_given) %>%
# adds new column containing the percentage who did/did not receive
# medication
mutate(percent = n / sum(n) * 100)
# produces a bar chart
merged_all_percentage %>%
ggplot() +
# creates the bar plot
geom_bar(stat = "identity",
aes(x = medication_given, y = percent, fill = medication_given)) +
# labels the graph
labs(x = "Medication Given",
y = "Percentage",
title = "Percentage of Patients who Received Medication",
fill = "Medication Given")
# produces a summary table for number of patients treated at each hospital
merged_all %>%
# groups by hospital location
group_by(hospital_location) %>%
# counts the number of rows for each unique hospital location
summarize(total_patients = n()) %>%
# arranges in descending order per total_patients
arrange(desc(total_patients)) %>%
# keeps the first row (highest number of total_patients)
slice(1)
# produces a time series plot of total patient visits per month
merged_all %>%
# groups by month
group_by(visit_month) %>%
# counts the total rows for each month
summarize(total_patients = n()) %>%
# produces the time series
ggplot() +
# plots visit_month on the x axis, total_patients on the y axis
geom_line(aes(x = visit_month, y = total_patients)) +
# changes the labels on the x axis to 1:12 to signify the months
scale_x_continuous(breaks = 1:12) +
labs(x = "Month",
y = "Number of Patient Visits",
title = "Month vs. Number of Patients")
# produces a summary table containing information for each age group
merged_all %>%
# groups by patient_age_group
group_by(patient_age_group) %>%
# calculates mean, median, min, max, and sd by age group
summarize(mean_chol = mean(cholesterol_level),
median_chol = median(cholesterol_level),
min_chol = min(cholesterol_level),
max_chol = max(cholesterol_level),
sd_chol = sd(cholesterol_level))
# produces a bar plot of conditions, faceted by hospitals
merged_all %>%
ggplot() +
geom_bar(aes(y = condition)) +
# facets by hospital
facet_wrap(~ hospital_location)
# produces a summary table of total conditions treated
merged_all %>%
# groups by conditions
group_by(condition) %>%
# computes the number of rows for each unique group
summarize(count = n()) %>%
# arranges in descending order by count
arrange(desc(count))
merged_all <- merged_all %>%
# creates a new column for high_risk patients, defined as those who
# have high cholesterol and state 2 hypertension (blood pressure)
mutate(high_risk = (cholesterol_risk == "High" & blood_pressure == "Stage 2 Hypertension"))
merged_all %>%
# selects columns to accurately display the new column
select(patient_id:visit_date, blood_pressure:cholesterol_level, high_risk) %>%
head() # displays the first 6 rows
merged_all %>%
# filters to only keep the high_risk rows
filter(high_risk) %>%
# arranges in descending order by cholesterol level
arrange(desc(cholesterol_level)) %>%
# displays the first 10 rows (top 10 most at-risk patients)
slice(1:10)
# produces a scatterplot of cholesterol level vs. patient age
merged_all %>%
ggplot() +
# plots patient_age on the x axis, cholesterol_level on the y axis
geom_point(aes(x = patient_age, y = cholesterol_level)) +
# labels the graph
labs(x = "Patient Age",
y = "Cholesterol Level (mg/dL)",
title = "Cholesterol Level vs. Patient Age")
knitr::purl(input = "midterm1takehome.Rmd", output = "Report.R", documentation = 0)
# displays the structure of the data set
glimpse(merged_all)
q()
